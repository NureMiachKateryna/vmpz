from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, DateTime, Text
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
from datetime import datetime

Base = declarative_base()

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    email = Column(String, nullable=False, unique=True)

    posts = relationship("Post", back_populates="author")
    comments = relationship("Comment", back_populates="author")

# –ü–æ—Å—Ç
class Post(Base):
    __tablename__ = 'posts'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    content = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

    author = relationship("User", back_populates="posts")
    comments = relationship("Comment", back_populates="post")

# –ö–æ–º–µ–Ω—Ç–∞—Ä
class Comment(Base):
    __tablename__ = 'comments'
    id = Column(Integer, primary_key=True)
    post_id = Column(Integer, ForeignKey('posts.id'), nullable=False)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    content = Column(Text, nullable=False)
    timestamp = Column(DateTime, default=datetime.utcnow)

    post = relationship("Post", back_populates="comments")
    author = relationship("User", back_populates="comments")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
engine = create_engine('sqlite:///social_network.db')
Base.metadata.drop_all(engine)  # –æ—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –ë–î
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

# –î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç
def add_post(user_id, content):
    post = Post(user_id=user_id, content=content)
    session.add(post)
    session.commit()
    print(f"–ü–æ—Å—Ç –¥–æ–¥–∞–Ω–æ: {post.content}")

# –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä
def add_comment(post_id, user_id, content):
    comment = Comment(post_id=post_id, user_id=user_id, content=content)
    session.add(comment)
    session.commit()
    print(f"–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ: {comment.content}")

# –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Å—Ç–∏ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
def show_posts_with_comments():
    posts = session.query(Post).all()
    for post in posts:
        print(f"\nüìù –ü–æ—Å—Ç #{post.id} –≤—ñ–¥ {post.author.name}: {post.content}")
        print(f"   –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {post.timestamp.strftime('%Y-%m-%d %H:%M')}")
        if post.comments:
            for comment in post.comments:
                print(f"   üí¨ {comment.author.name}: {comment.content}")
        else:
            print("   (–ù–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤)")

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
if __name__ == "__main__":
    # –î–æ–¥–∞—î–º–æ –¥–≤–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    katya = User(name="–ö–∞—Ç—è", email="katya@example.com")
    alex = User(name="–û–ª–µ–∫—Å—ñ–π", email="alex@example.com")
    session.add_all([katya, alex])
    session.commit()

    # –ö–∞—Ç—è —Å—Ç–≤–æ—Ä—é—î –ø–æ—Å—Ç
    add_post(user_id=katya.id, content="–ù–∞—Ä–µ—à—Ç—ñ –ø–æ–±—É–≤–∞–ª–∞ —É –õ—å–≤–æ–≤—ñ! –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∞ ‚òïüè∞")

    # –û–ª–µ–∫—Å—ñ–π –∑–∞–ª–∏—à–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä
    add_comment(post_id=1, user_id=alex.id, content="–î—É–∂–µ –ª—é–±–ª—é –õ—å–≤—ñ–≤! –í—ñ–¥–≤—ñ–¥–∞–π –®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π –≥–∞–π üòä")

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–æ—Å—Ç–∏ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏
    show_posts_with_comments()
